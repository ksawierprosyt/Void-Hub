local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local Tab = Window:CreateTab("Tab Example", 4483362458)

 local Toggle = Tab:CreateToggle({
    Name = "Auto Plant Toggle",
    CurrentValue = false,
    Flag = "AutoPlantToggle",
    Callback = function(Value)
        if Value then
            startAutoPlant()
        else
            stopAutoPlant()
        end
    end,
 })
 
 -- Variables to control the automation
 local autoPlantRunning = false
 
 -- Function to start the auto-plant process
 function startAutoPlant()
     autoPlantRunning = true
     task.spawn(function()
         while autoPlantRunning do
             -- Fire the first remote event
             local args = {
                [1] = "FlowerGarden",
                [2] = "PlantSeed",
                [3] = 5,
                [4] = "Diamond"
            }
            
            game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer(unpack(args))
             wait(0.2) -- Wait 1 second
 
             -- Fire the second remote event
             local args = {
                [1] = "FlowerGarden",
                [2] = "InstaGrowSeed",
                [3] = 5
            }
            
            game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer(unpack(args))
             wait(0.2) -- Wait 1 second
 
             -- Fire the third remote event
             local args = {
                [1] = "FlowerGarden",
                [2] = "ClaimPlant",
                [3] = 5
            }
            
            game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args))
             wait(0.2) -- Wait 1 second
         end
     end)
 end
 
 -- Function to stop the auto-plant process
 function stopAutoPlant()
     autoPlantRunning = false
 end

 local Toggle = Tab:CreateToggle({
    Name = "Teleport and Hide Parts",
    CurrentValue = false,
    Flag = "TeleportToggle",
    Callback = function(Value)
        local Player = game.Players.LocalPlayer
        local Character = Player.Character or Player.CharacterAdded:Wait()
        local RootPart = Character:FindFirstChild("HumanoidRootPart")
        local ToggleConnection

        if Value then
            -- Use a task to run the process without waiting on heartbeat
            ToggleConnection = task.spawn(function()
                while Tab.Flags["TeleportToggle"] and RootPart do
                    -- Cache folders and objects for faster processing
                    local folders = {
                        game.Workspace:FindFirstChild("__THINGS") and game.Workspace["__THINGS"]:FindFirstChild("Orbs"),
                        game.Workspace:FindFirstChild("__THINGS") and game.Workspace["__THINGS"]:FindFirstChild("Lootbags"),
                    }

                    -- Iterate over folders only if they exist
                    for _, folder in ipairs(folders) do
                        if folder then
                            for _, obj in ipairs(folder:GetChildren()) do
                                -- Teleport and hide parts faster by reducing unnecessary checks
                                if obj:IsA("Part") or obj:IsA("MeshPart") then
                                    obj.CFrame = RootPart.CFrame -- Teleport part
                                    obj.Transparency = 1 -- Hide part
                                elseif obj:IsA("Model") then
                                    -- Teleport models (only move their PrimaryPart)
                                    local PrimaryPart = obj.PrimaryPart or obj:FindFirstChildOfClass("Part")
                                    if PrimaryPart then
                                        obj:SetPrimaryPartCFrame(RootPart.CFrame)
                                    end
                                end
                            end
                        end
                    end
                    wait(0.1) -- Wait 0.1 seconds before repeating
                end
            end)
        else
            -- Disconnect the loop if the toggle is off
            if ToggleConnection then
                ToggleConnection:Disconnect()
            end
        end
    end,
})
