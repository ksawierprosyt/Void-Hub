local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Create Rayfield Window
local Window = Rayfield:CreateWindow({
    Name = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
    Icon = 0,
    LoadingTitle = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name,
    LoadingSubtitle = "by Void Hub",
    Theme = "Default",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = false,
        FolderName = nil,
        FileName = "Big Hub"
    },

    Discord = {
        Enabled = true,
        Invite = "https://discord.gg/36JRDhmT8P",
        RememberJoins = false
    },

    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

local InfoTab = Window:CreateTab("Info")  -- Info Tab
local FarmTab = Window:CreateTab("Farm")  -- Farm Tab

-- Global Configuration Setup
getgenv().config = {
    farm = {
        toggle = false,
        singleTarget = false,
        farmPrint = false,
        radius = 70,
        wait = 0.2
    },
    autoLootbag = false,
    autoOrb = false
}

local LocalPlayer = game.Players.LocalPlayer
local HumanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart", true)

local Things = game.workspace['__THINGS']
local Lootbags = Things.Lootbags
local Orbs = Things.Orbs
local Breakables = Things.Breakables
local Network = game:GetService("ReplicatedStorage").Network
local PetInventory = LocalPlayer.PlayerGui.Inventory.Frame.Main.Pets.EquippedPets

getgenv().currentCoins = {}
getgenv().equippedPets = {}
getgenv().totalClaimed = 0
getgenv().totalTime = 0

local function indexPets()
    table.clear(getgenv().equippedPets)
    for _, pet in ipairs(Pets:GetChildren()) do
        if PetInventory:FindFirstChild(pet.Name) then
            table.insert(getgenv().equippedPets, pet.Name)
        end
    end
    return getgenv().equippedPets
end

local function calcDistance(obj1, obj2)
    local pPosX, pPosZ = obj1.CFrame.X, obj1.CFrame.Z
    local hPosX, hPosZ = obj2.CFrame.X, obj2.CFrame.Z
    return (pPosX - hPosX)^2 + (pPosZ - hPosZ)^2 -- Skip the square root for speed
end

-- Optimize collection loops by limiting checks
local function autoCollect(targets, callback)
    -- Cache the list of items
    local items = {}
    for _, target in ipairs(targets:GetChildren()) do
        if target:IsA("MeshPart") then
            table.insert(items, target)
        end
    end

    -- Call the callback for each item once
    for _, item in ipairs(items) do
        callback(item)
    end
end

-- Create Rayfield UI toggles

-- Farm Nearest Coins Toggle
local farmToggle = FarmTab:CreateToggle({
    Name = "Farm Nearest Coins",
    CurrentValue = false,
    Flag = "toggleFarm",
    Callback = function(value)
        getgenv().config.farm.toggle = value
        while getgenv().config.farm.toggle and task.wait(0.5) do -- Increased wait time to reduce lag
            for _, v in ipairs(Breakables:GetChildren()) do
                if v.Name ~= "Highlight" and v:FindFirstChild("Hitbox", true) then
                    local part = v:FindFirstChild("Hitbox", true)

                    if calcDistance(part, HumanoidRootPart) <= getgenv().config.farm.radius then
                        if getgenv().config.farm.singleTarget then
                            local tmpName = v.Name
                            local startTime = os.clock()

                            repeat
                                if calcDistance(part, HumanoidRootPart) > getgenv().config.farm.radius then
                                    break
                                end
                                task.wait(getgenv().config.farm.wait)
                                Network.Breakables_PlayerDealDamage:FireServer(v.Name)
                            until not Breakables:FindFirstChild(v.Name)

                            getgenv().totalClaimed = getgenv().totalClaimed + 1
                            getgenv().totalTime = getgenv().totalTime + (os.clock() - startTime)
                            if getgenv().config.farm.farmPrint then
                                print("Farmed "..tmpName.." in: "..tostring(os.clock() - startTime).." Avg: "..tostring(getgenv().totalTime / getgenv().totalClaimed))
                            end
                        else
                            if not table.find(getgenv().currentCoins, v.Name) then
                                table.insert(getgenv().currentCoins, v.Name)
                                task.spawn(function()
                                    local tmpPart = part
                                    local tmpName = v.Name
                                    local startTime = os.clock()
                                    repeat
                                        if calcDistance(tmpPart, HumanoidRootPart) > getgenv().config.farm.radius then
                                            table.remove(getgenv().currentCoins, table.find(getgenv().currentCoins, v.Name))
                                            break
                                        end

                                        task.wait(getgenv().config.farm.wait * math.random(1, 2))

                                        Network.Breakables_PlayerDealDamage:FireServer(tmpName)
                                    until not Breakables:FindFirstChild(tmpName)

                                    table.remove(getgenv().currentCoins, table.find(getgenv().currentCoins, v.Name))
                                    getgenv().totalClaimed = getgenv().totalClaimed + 1
                                    getgenv().totalTime = getgenv().totalTime + (os.clock() - startTime)
                                    if getgenv().config.farm.farmPrint then
                                        print("Farmed "..tmpName.." in: "..tostring(os.clock() - startTime).." Avg: "..tostring(getgenv().totalTime / getgenv().totalClaimed))
                                    end
                                end)
                            end
                        end
                    end
                end
            end
        end
    end
})

-- Auto Lootbag Toggle
local lootbagToggle = FarmTab:CreateToggle({
    Name = "Auto Collect Lootbags",
    CurrentValue = false,
    Flag = "toggleLootbag",
    Callback = function(value)
        getgenv().config.autoLootbag = value
        while getgenv().config.autoLootbag and task.wait(1) do -- Increased wait time to reduce lag
            autoCollect(Lootbags, function(lootbag)
                lootbag.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position)
            end)
        end
    end
})

-- Auto Orb Toggle
local orbToggle = FarmTab:CreateToggle({
    Name = "Auto Collect Orbs",
    CurrentValue = false,
    Flag = "toggleOrbs",
    Callback = function(value)
        getgenv().config.autoOrb = value
        while getgenv().config.autoOrb and task.wait(1) do -- Increased wait time to reduce lag
            autoCollect(Orbs, function(orb)
                orb.CFrame = CFrame.new(LocalPlayer.Character.HumanoidRootPart.Position)
            end)
        end
    end
})

local selectedFruitUID = nil

-- Dropdown for selecting fruit
local fruitDropdown = FarmTab:CreateDropdown({
    Name = "Pick Fruit",
    Options = {"Rainbow", "Apple", "Banana", "Orange", "Pineapple", "Watermelon"},
    CurrentOption = {"Apple"},  -- Default fruit (Apple) selected
    MultipleOptions = false,
    Flag = "fruitdropdown", -- A flag is the identifier for the configuration file
    Callback = function(Options)
        -- This will be triggered whenever the dropdown value is changed.
        local selectedFruit = Options[1]
        print("Selected Fruit: " .. selectedFruit)
        
        -- Find the UID of the selected fruit
        local inv = require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory
        local fruits = inv.Fruit
        
        -- Store the selected fruit's UID globally for use in other parts of the script
        selectedFruitUID = nil
        for uid, fruit in pairs(fruits) do
            if fruit.id == selectedFruit then
                selectedFruitUID = uid
                break
            end
        end
    end,
})

-- Auto Eat Fruit Toggle
local AutoEatFruitToggle = FarmTab:CreateToggle({
    Name = "Auto Eat Fruit",
    CurrentValue = false,
    Flag = "EatFruit", -- A flag for the configuration file
    Callback = function(Value)
        -- When the toggle is pressed, handle the auto-eat functionality
        if Value then
            print("Auto Eat Fruit is enabled.")
            
            -- Ensure that a fruit is selected and we have the UID for it
            if selectedFruitUID then
                -- Repeatedly fire the RemoteEvent to consume the fruit while the toggle is enabled
                local consumeInterval = 1 -- Interval in seconds (adjust as needed)
                local repeatEat = true

                -- Keep firing the event while the toggle is on
                local connection
                connection = game:GetService("RunService").Heartbeat:Connect(function()
                    if not AutoEatFruitToggle.CurrentValue then
                        connection:Disconnect()
                        return
                    end

                    -- Fire the event to consume the fruit
                    local args = {
                        [1] = selectedFruitUID,
                        [2] = 1
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Fruits: Consume"):FireServer(unpack(args))
                    print("Consuming fruit: " .. selectedFruitUID)
                    
                    -- Wait for the interval before firing again
                    wait(consumeInterval)
                end)
            else
                print("No fruit selected!")
            end
        else
            print("Auto Eat Fruit is disabled.")
        end
    end,
})
