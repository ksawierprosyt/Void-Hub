local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local Tab = Window:CreateTab("Tab Example", 4483362458)

 local Toggle = Tab:CreateToggle({
    Name = "Toggle Example",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        -- The function that takes place when the toggle is pressed
        -- The variable (Value) is a boolean on whether the toggle is true or false
        
        if Value then
                -- Fire the first RemoteEvent
                local args1 = {
                    [1] = "FlowerGarden",
                    [2] = "PlantSeed",
                    [3] = 5,
                    [4] = "Diamond"
                }
                game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer(unpack(args1))
                wait(1)
                -- Fire the second RemoteEvent
                local args2 = {
                    [1] = "FlowerGarden",
                    [2] = "InstaGrowSeed",
                    [3] = 5
                }
                game:GetService("ReplicatedStorage").Network.Instancing_InvokeCustomFromClient:InvokeServer(unpack(args2))
                wait(1)
                -- Fire the third RemoteEvent
                local args3 = {
                    [1] = "FlowerGarden",
                    [2] = "ClaimPlant",
                    [3] = 5
                }
                game:GetService("ReplicatedStorage").Network.Instancing_FireCustomFromClient:FireServer(unpack(args3))
            end)
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Teleport and Hide Parts",
    CurrentValue = false,
    Flag = "TeleportToggle",
    Callback = function(Value)
        if Value then
            -- Run this code when the toggle is turned on
            local RunService = game:GetService("RunService")
            local Player = game.Players.LocalPlayer
            local Character = Player.Character or Player.CharacterAdded:Wait()
            local RootPart = Character:FindFirstChild("HumanoidRootPart")
            local ToggleConnection

            ToggleConnection = RunService.Heartbeat:Connect(function()
                if not Tab.Flags["TeleportToggle"] or not RootPart then
                    -- Stop the loop if toggle is turned off or player doesn't have a root part
                    ToggleConnection:Disconnect()
                    return
                end
                
                local folders = {
                    game.Workspace["__THINGS"].Orbs,
                    game.Workspace["__THINGS"].Lootbags
                }
                
                for _, folder in ipairs(folders) do
                    for _, obj in ipairs(folder:GetDescendants()) do
                        if obj:IsA("Part") or obj:IsA("MeshPart") then
                            -- Teleport to player's HumanoidRootPart position
                            obj.CFrame = RootPart.CFrame
                            obj.Transparency = 1 -- Make it invisible
                        elseif obj:IsA("Model") then
                            -- Teleport models but leave their visibility intact
                            local PrimaryPart = obj.PrimaryPart or obj:FindFirstChildOfClass("Part")
                            if PrimaryPart then
                                obj:SetPrimaryPartCFrame(RootPart.CFrame)
                            end
                        end
                    end
                end
            end)
        end
    end,
})
