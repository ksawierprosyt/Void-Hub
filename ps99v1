local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "[Void Hub] Pet Simulator 99",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "[Void Hub] Pet Simulator 99",
    LoadingSubtitle = "by Void Hub",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil, -- Create a custom folder for your hub/game
        FileName = "Big Hub"
    },

    Discord = {
        Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
        Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
        RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },

    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
        FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
        SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
        GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
        Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
})

local Tab = Window:CreateTab("Main", 4483362458)
local FarmTab = Window:CreateTab("Farm")

local LocalPlayer = game.Players.LocalPlayer
local HumanoidRootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart", true)

local Things = game.workspace['__THINGS']
local Breakables = Things.Breakables
local Network = game:GetService("ReplicatedStorage").Network

local currentCoins = {}
local totalClaimed = 0
local totalTime = 0

-- Calculate distance between two objects
local function calcDistance(obj1, obj2)
    local pPosX, pPosZ = obj1.CFrame.X, obj1.CFrame.Z
    local hPosX, hPosZ = obj2.CFrame.X, obj2.CFrame.Z

    return math.sqrt((pPosX - hPosX)^2 + (pPosZ - hPosZ)^2)
end

-- Start the auto farming process for nearest coins
local function startFarmingCoins()
    while getgenv().config.farm.toggle do
        for _, v in ipairs(Breakables:GetChildren()) do
            if v.Name ~= "Highlight" and v:FindFirstChild("Hitbox", true) then
                local part = v:FindFirstChild("Hitbox", true)

                if calcDistance(part, HumanoidRootPart) <= getgenv().config.farm.radius then
                    if getgenv().config.farm.singleTarget then
                        local tmpName = v.Name
                        local startTime = os.clock()

                        repeat
                            if calcDistance(part, HumanoidRootPart) > getgenv().config.farm.radius then
                                break
                            end
                            task.wait(getgenv().config.farm.wait)
                            Network.Breakables_PlayerDealDamage:FireServer(v.Name)
                        until not Breakables:FindFirstChild(v.Name)

                        totalClaimed = totalClaimed + 1
                        totalTime = totalTime + (os.clock() - startTime)
                        if getgenv().config.farm.farmPrint then
                            print("Farmed "..tmpName.." in: "..tostring(os.clock() - startTime).." Avg: "..tostring(totalTime/totalClaimed))
                        end
                    else
                        if not table.find(currentCoins, v.Name) then
                            table.insert(currentCoins, v.Name)
                            task.spawn(function()
                                local tmpPart = part
                                local tmpName = v.Name
                                local startTime = os.clock()
                                repeat
                                    if calcDistance(tmpPart, HumanoidRootPart) > getgenv().config.farm.radius then
                                        table.remove(currentCoins, table.find(currentCoins, v.Name))
                                        break
                                    end

                                    task.wait(getgenv().config.farm.wait * math.random(1, 2))

                                    Network.Breakables_PlayerDealDamage:FireServer(tmpName)
                                until not Breakables:FindFirstChild(tmpName)

                                table.remove(currentCoins, table.find(currentCoins, v.Name))
                                totalClaimed = totalClaimed + 1
                                totalTime = totalTime + (os.clock() - startTime)
                                if getgenv().config.farm.farmPrint then
                                    print("Farmed "..tmpName.." in: "..tostring(os.clock() - startTime).." Avg: "..tostring(totalTime/totalClaimed))
                                end
                            end)
                        end
                    end
                end
            end
        end
        task.wait() -- Reduce load when idle
    end
end

-- Stop the farming process
local function stopFarmingCoins()
    getgenv().config.farm.toggle = false
end

-- Farm Toggle for Nearest Coins
local farmToggle = FarmTab:CreateToggle({
    Name = "Farm Nearest Coins",
    CurrentValue = false,
    Flag = "toggleFarm",
    Callback = function(value)
        getgenv().config.farm.toggle = value
        if value then
            -- Start farming the coins
            startFarmingCoins()
        else
            -- Stop farming the coins
            stopFarmingCoins()
        end
    end,
})
